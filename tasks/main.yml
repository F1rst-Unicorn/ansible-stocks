---
- name: Install from file
  include_tasks: package_installation.yml
  when: not stocks_use_official_repo

- name: Install from repository
  include_tasks: repo_installation.yml
  when: stocks_use_official_repo

- name: Configure stocks
  become: True
  template:
    src: stocks.properties.j2
    dest: "{{ stocks_etc }}/{{ stocks_instance }}.properties"
    owner: "{{ stocks_tomcat_user }}"
    group: "{{ stocks_tomcat_user }}"
    mode: 0644

- name: Configure stocks
  become: True
  template:
    src: log4j2.xml.j2
    dest: "{{ stocks_etc }}/log4j2-{{ stocks_instance }}.xml"
    owner: "{{ stocks_tomcat_user }}"
    group: "{{ stocks_tomcat_user }}"
    mode: 0644

- name: Setup database user
  become: True
  become_user: "{{ stocks_postgresql_admin_user }}"
  postgresql_user:
    name: "{{ stocks_postgresql_options.user }}"
    password: "{{ stocks_postgresql_options.password | default(None) }}"
  when: stocks_local_database

- name: Setup database
  become: True
  become_user: "{{ stocks_postgresql_admin_user }}"
  postgresql_db:
    name: "{{ stocks_postgresql_database }}"
    owner: "{{ stocks_postgresql_options.user }}"
  register: db_presence
  when: stocks_local_database

- name: Link server.war
  become: True
  file:
    src: "{{ stocks_lib }}/server.war"
    dest: "{{ stocks_tomcat_root }}/{{ stocks_instance }}.war"
    state: link

- name: Start tomcat
  become: True
  service:
    name: tomcat8
    state: started
    enabled: True

- name: Copy SQL for first stocks user
  template:
    src: initial_user.sql.j2
    dest: "{{ stocks_remote_pkg_dir }}/initial_user.sql"
  when: db_presence.changed and stocks_local_database

- name: Create CA
  become: True
  command: "{{ stocks_lib }}/setup-ca {{ stocks_base }}/instances/{{ stocks_instance }}/CA {{ stocks_base }}"
  args:
    creates: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA"

- name: Change owner of CA
  become: True
  file:
    name: "{{ stocks_base }}/instances/{{ stocks_instance }}"
    owner: "{{ stocks_tomcat_user }}"
    group: "{{ stocks_tomcat_user }}"
    recurse: True

- name: Create download point directory
  become: True
  file:
    state: directory
    path: "{{ stocks_base }}/instances/{{ stocks_instance }}/nginx"
    owner: "{{ stocks_tomcat_user }}"
    group: "{{ stocks_tomcat_user }}"

- name: Create download points
  become: True
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: True
    owner: "{{ stocks_tomcat_user }}"
    group: "{{ stocks_tomcat_user }}"
    mode: preserve
  with_items:
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/certs/ca.cert.pem"
      dest: "{{ stocks_base }}/instances/{{ stocks_instance }}/nginx/ca"
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/intermediate/certs/ca-chain.cert.pem"
      dest: "{{ stocks_base }}/instances/{{ stocks_instance }}/nginx/chain"

- name: Create nginx SSL
  become: True
  file:
    path: /etc/nginx/ssl
    state: directory
    mode: 0700

- name: Copy key material
  become: True
  copy:
    src: "{{ item.src }}"
    dest: "/etc/nginx/ssl/{{ item.dest }}"
    remote_src: True
    mode: 0400
  with_items:
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/certs/ca.cert.pem"
      dest: stocks-{{ stocks_instance }}.cert.pem
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/intermediate/certs/ca-chain.cert.pem"
      dest: stocks-{{ stocks_instance }}.ca-chain.pem
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/intermediate/certs/server.cert.pem"
      dest: stocks-{{ stocks_instance }}.cert.pem
    - src: "{{ stocks_base }}/instances/{{ stocks_instance }}/CA/intermediate/private/server.key.pem"
      dest: stocks-{{ stocks_instance }}.key.pem
  notify: Restart nginx

- name: Generate dhparams
  become: True
  command: openssl dhparam -out /etc/nginx/dhparam.pem 4096
  args:
    creates: /etc/nginx/dhparam.pem
  notify: Restart nginx
  when: stocks_nginx_generate_dhparam

- name: Add nginx reload to sudoers
  become: True
  copy:
    content: "{{ stocks_sudoers_line }}"
    dest: "/etc/sudoers.d/stocks"
    mode: 0400
    validate: /usr/bin/visudo -cf %s

- name: Install nginx config
  become: True
  copy:
    src: "{{ stocks_base }}/nginx.conf"
    dest: /etc/nginx/nginx.conf
    remote_src: True
    mode: 0644
    backup: True
  when: stocks_nginx_managed
  notify: Reload nginx

- name: Setup nginx directories
  become: True
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - /etc/nginx/sites-enabled
    - /etc/nginx/sites-available

- name: Configure nginx site
  become: True
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/{{ stocks_instance }}.conf
    owner: root
    group: root
    mode: 0755

- name: Enable site in nginx
  become: True
  file:
    src: /etc/nginx/sites-available/{{ stocks_instance }}.conf
    dest: /etc/nginx/sites-enabled/{{ stocks_instance }}.conf
    state: link
  notify: Reload nginx

- name: Enable generated dhparams
  become: True
  replace:
    path: /etc/nginx/sites-enabled/{{ stocks_instance }}.conf
    regexp: "#ssl_dhparam"
    replace: ssl_dhparam
  when: stocks_nginx_generate_dhparam
  notify: Reload nginx

- name: Start nginx server
  become: True
  service:
    name: nginx
    state: started
    enabled: True

- name: Wait for Tomcat startup
  wait_for:
    host: 127.0.0.1
    port: 8080
    state: started

- name: Wait for migrations to run
  postgresql_query:
    db: "{{ stocks_postgresql_database }}"
    login_host: "{{ stocks_postgresql_host }}"
    port: "{{ stocks_postgresql_port }}"
    login_user: "{{ stocks_postgresql_options.user }}"
    login_password: "{{ stocks_postgresql_options.password | default(None) }}"
    query: >
      do $$begin
        while not (select exists (select from information_schema.tables where table_name = 'databasechangelog')) loop
          perform pg_sleep(1);
        end loop;

        while (select count(*) from databasechangelog) != 39 loop
          perform pg_sleep(1);
        end loop;
      end$$;
  when: db_presence.changed and stocks_local_database


- name: Fill database
  postgresql_db:
    name: "{{ stocks_postgresql_database }}"
    state: restore
    target: "{{ stocks_remote_pkg_dir }}/initial_user.sql"
    login_host: "{{ stocks_postgresql_host }}"
    port: "{{ stocks_postgresql_port }}"
    login_user: "{{ stocks_postgresql_options.user }}"
    login_password: "{{ stocks_postgresql_options.password | default(None) }}"
  when: db_presence.changed and stocks_local_database
